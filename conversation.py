# -*- coding: utf-8 -*-
"""conversation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/121UOuzNnwx9zz-slo2Wby6-uZpUv93MH
"""

!pip install transformers
!pip install torch

from transformers import AutoModelWithLMHead, AutoTokenizer
import torch

model = "microsoft/DialoGPT-large"

tokenizer = AutoTokenizer.from_pretrained(model)
model = AutoModelWithLMHead.from_pretrained(model)

def talk(model, tokenizer) -> None:
    forget_topic = 1

    while True:
        user_input = input(">> User:")

        if user_input == "Let's change the topic":
            forget_topic = 1
            user_input = input(">> User:")

        # encode the new user input, add the eos_token and return a tensor in Pytorch
        new_user_input_ids = tokenizer.encode(user_input + tokenizer.eos_token, return_tensors='pt')

        # append the new user input tokens to the chat history
        bot_input_ids = torch.cat([chat_history_ids, new_user_input_ids], dim=-1) if forget_topic == 0 else new_user_input_ids

        forget_topic = 0

        try:
            # generated a response while limiting the total chat history to 200 tokens
            chat_history_ids = model.generate(bot_input_ids, max_length=200, pad_token_id=tokenizer.eos_token_id, )

            # pretty print last ouput tokens from bot
            print(">> Model: {}".format(tokenizer.decode(chat_history_ids[:, bot_input_ids.shape[-1]:][0], skip_special_tokens=True)))

        except:
            print('Try using different model')

talk(model, tokenizer)

